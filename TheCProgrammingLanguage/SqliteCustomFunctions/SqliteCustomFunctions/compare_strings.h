#ifndef _COMPARE_STRINGS_H_
#define _COMPARE_STRINGS_H_

# define CHAR16 unsigned short int

/* An array to map all upper-case characters into their corresponding
** lower-case character. Unicode characters
*/
static const unsigned char sqlite3UpperToLower[] = {
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
    36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99,100,101,102,103,
    104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,
    122, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,
    108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,
    126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
    144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,
    162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,
    180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,228,197,
    198,199,200,233,202,203,204,205,206,207,208,209,210,211,212,213,246,215,
    216,217,218,219,252,221,222,223,224,225,226,227,228,229,230,231,232,233,
    234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,
    252,253,254,255
};

/*
** CYRILLIC Unicode characters
*/
static CHAR16 upperToLowerFrom1025To1110[] = {
    1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,
    1119,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,
    1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,
    1099,1100,1101,1102,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,
    1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,
    1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,
    1109,1110
};

# define toLowerFrom0To255(x)   (sqlite3UpperToLower[(unsigned char)(x)])
# define toLowerFrom1025To1110(x)   (upperToLowerFrom1025To1110[(x) - 1025])

int compare_strings(const unsigned char *first, const unsigned char *second)
{
    int i = 0;
    unsigned char f = 0;
    unsigned char s = 0;

    do
    {
        f = first[i];
        s = second[i];
        if (f != s)
        {
            return 0;
        }
        ++i;
    } while (f != 0 && s != 0);
    return 1;
}

CHAR16 toLower(CHAR16 character)
{
    if (character < 256)
    {
        return toLowerFrom0To255(character);
    }
    else if (1024 < character && character < 1111)
    {
        return toLowerFrom1025To1110(character);
    }
    return character;
}

int compare_strings_ignore_case(CHAR16 *first, CHAR16 *second)
{
    int i = 0;
    CHAR16  f = 0;
    CHAR16  s = 0;
    do
    {
        f = toLower(first[i]);
        s = toLower(second[i]);
        if (f != s)
        {
            return 0;
        }
        ++i;
    } while (f != 0 && s != 0);
    return 1;
}

/* An array to map all upper-case characters into their corresponding
** lower-case character. Unicode characters
*/
static const unsigned char lowerToUpperFrom0To254[] = {
    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
    26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
    49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,
    72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,
    95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,
    86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,
    137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,
    155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,
    173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,
    191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
    209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,192,193,194,
    195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,
    213,214,247,216,217,218,219,220,221,222
};

/*
** CYRILLIC Unicode characters
*/
static CHAR16 lowerToUpperFrom1025To1110[] = {
    1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,
    1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,
    1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,
    1070,1071,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,
    1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,
    1068,1069,1070,1071,1024,1025,1026,1027,1028,1029,1030
};

# define toUpperFrom0To254(x)   (lowerToUpperFrom0To254[(unsigned char)(x)])
# define toUpperFrom1025To1110(x)   (lowerToUpperFrom1025To1110[(x) - 1025])


CHAR16 toUpper(CHAR16 character)
{
    if (character < 255)
    {
        return toUpperFrom0To254(character);
    }
    else if (1024 < character && character < 1111)
    {
        return toUpperFrom1025To1110(character);
    }
    return character;
}

#endif // _COMPARE_STRINGS_H_